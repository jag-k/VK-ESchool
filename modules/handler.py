# from vk_api.bot_longpoll import VkBotEvent as Event
from config import *
from tinydb import TinyDB, Query
from .auth import Bot
from .helper import *
from balance import sync_get_balance
from vk_api.keyboard import VkKeyboard as Keyboard, VkKeyboardColor as Color


user_state = TinyDB(USER_STATES_DB)
user_card = TinyDB(USER_CARDS_DB)
Query = Query()


def state_handler(status):
    def _(func):
        State(status, func)
        return func
    return _


class State:
    states = {}

    def __init__(self, state_status, func):
        self.states[state_status] = func

    @classmethod
    def use_func(cls, state, bot: Bot):
        def _(state, bot): pass
        return cls.states.get(state, _)(cls, bot)

    @staticmethod
    def set_state(state, bot: Bot):
        user_id = bot.from_id
        user = {
            "user_id": user_id,
            "state": state
        }
        return user_state.upsert(user, Query.user_id == user_id)

    @staticmethod
    def get_state(bot: Bot):
        return user_state.get(Query.user_id == bot.from_id)


def message_handler(bot: Bot):
    user_id = bot.from_id
    user = user_state.get(Query.user_id == user_id)
    if not user:
        user = {
            "user_id": user_id,
            "state": 0
        }
        user_state.insert(user)

    print("https://vk.com/id%s (%s): %s" % (bot.from_id, State.get_state(bot).get('state'), bot.text))
    return State.use_func(user.get("state"), bot)


# KEYBOARDS

def create_kb(kb_list: list, one_time=False) -> Keyboard:
    k = Keyboard(one_time)
    for row in kb_list:
        for button in row:
            if type(button) in (list, tuple):
                k.add_button(*button)
            elif type(button) == dict:
                k.add_button(**button)
            else:
                k.add_button(button)
        k.add_line()
    del k.lines[-1]
    return k


MAIN_KB = create_kb([
    [("–ë–∞–ª–∞–Ω—Å", Color.POSITIVE), ("–ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", Color.DEFAULT)],
    [("–°–ø—Ä–∞–≤–∫–∞", Color.PRIMARY), ("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", Color.PRIMARY)],
    [("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", Color.NEGATIVE)]
])

HELP_ONLY_KB = create_kb([
    [("–°–ø—Ä–∞–≤–∫–∞", Color.PRIMARY)]
])

BOOL_KB = create_kb([
    [("–î–∞", Color.NEGATIVE), ("–ù–µ—Ç", Color.POSITIVE)]
], True)

START_KB = create_kb([
    [("–ù–∞—á–∞—Ç—å", Color.PRIMARY, {"command": "start"})]
], True)


# STATES

@state_handler(0)
def start(state: State, bot: Bot):
    print("State:", state.get_state(bot))

    bot.send_forward("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!) –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ **-******, –≥–¥–µ * —ç—Ç–æ —Ü–∏—Ñ—Ä—ã\n\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: 39-212345", keyboard=HELP_ONLY_KB)
    state.set_state(1, bot)


@state_handler(1)
def get_card_number(state: State, bot: Bot):

    user_id = bot.from_id
    error_msg = "‚ö† Ô∏è–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ –≤–µ—Ä–Ω—ã! –ü–æ–ø—Ä–æ—å–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–Ω–æ–≤–∞.\n\n"\
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ **-******, –≥–¥–µ * —ç—Ç–æ —Ü–∏—Ñ—Ä—ã\n"\
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 39-212345"
    text = remove_from_string(strip(bot.text.strip(), '"', '"'), '-', "_", " ")
    if text.isdigit() and len(text) == 8:
        text = text[0:2] + '-' + text[2:]

        res = sync_get_balance(text)  # type: dict
        if res and not res.get("type") == "error":
            msg = to_balance_string(res)

            with TinyDB(CARDS_DB) as db:
                db.upsert(res, Query.card == res.get('card'))

            user_card.upsert({"user_id": user_id, "card": res.get('card')}, Query.user_id == user_id)
            state.set_state(2, bot)
            bot.send_forward(msg, kb=MAIN_KB)
            return

    elif text.lower() in ("–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–æ –±–æ—Ç–µ", "about", "—á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ",
                          "–¥–ª—è —á–µ–≥–æ", "–¥–ª—è —á–µ–≥–æ —ç—Ç–æ", "–¥–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ", "?", "—Å–ø—Ä–∞–≤–∫–∞", "–ø–æ–º–æ—â—å"):
        bot.send_forward(ABOUT_STRING, keyboard=HELP_ONLY_KB)
        return
    bot.send_forward(error_msg, keyboard=HELP_ONLY_KB)


@state_handler(2)
def main_branch(state: State, bot: Bot):

    text = strip(bot.text.strip(), '!', '/').lower()
    if text in ('balance', '–±–∞–ª–∞–Ω—Å', ',fkfyc'):
        try:
            bot.send_forward(
                to_balance_string(sync_get_balance(user_card.get(Query.user_id == bot.from_id).get("card"))),
                kb=MAIN_KB
            )
        except Exception as err:
            bot.send_forward(USER_SERVER_ERROR_STRING)
            raise err

    elif text in ("–ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", "–ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                  "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä"):
        bot.send_forward("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ **-******, –≥–¥–µ * —ç—Ç–æ —Ü–∏—Ñ—Ä—ã\n\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: 39-212345", kb=HELP_ONLY_KB)
        state.set_state(1, bot)

    elif text in ("cancel", "break", "unsubscribe", "–æ—Ç–º–µ–Ω–∞", "–æ—Ç–ø–∏—Å–∫–∞", "—É–¥–∞–ª–∏—Ç—å", "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"):
        bot.send_forward("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ —É –±–æ—Ç–∞?",
                         kb=BOOL_KB)
        state.set_state(3, bot)

    elif text in ("gjvjon", "help", "?", "h", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"):
        bot.send_forward(HELP_STRING, kb=MAIN_KB)

    elif strip(text, "?", '.', "!") in ("–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–æ –±–æ—Ç–µ", "about", "—á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ",
                                        "–¥–ª—è —á–µ–≥–æ", "–¥–ª—è —á–µ–≥–æ —ç—Ç–æ", "–¥–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ"):
        bot.send_forward(ABOUT_STRING, kb=MAIN_KB)

    else:
        bot.send_forward("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! "
                         "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ø–æ–º–æ—â—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                         kb=MAIN_KB)


@state_handler(3)
def unsubscribe(state: State, bot: Bot):  # TODO: –°–¥–µ–ª–∞—Ç—å –æ—Ç–ø–∏—Å–∫—É
    text = bot.text.lower().strip()
    user_id = bot.from_id
    if text in ("–¥–∞", "yes", "y", "–¥"):
        with TinyDB(CARDS_DB) as db:
            for i in db:
                card = i.get("card")
                if user_card.count(Query.card == card) == 1:

                    db.remove(doc_ids=[i.doc_id])
        user_card.remove(Query.user_id == user_id)
        user_state.remove(Query.user_id == user_id)

        bot.send_forward("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å", kb=START_KB)
    else:
        bot.send_forward("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø–∏—Å–∫—É."
                         "\n\nüíµ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ \"–±–∞–ª–∞–Ω—Å\".\n"
                         "üìÉ –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"–ø–æ–º–æ—â—å\"",
                         kb=MAIN_KB)
        state.set_state(2, bot)
